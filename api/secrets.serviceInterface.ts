/**
 * Chaos
 * Central Management API - publicly exposed set of APIs for managing deployments
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qernal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { BadRequestResponse } from '../model/models';
import { ConflictResponse } from '../model/models';
import { DeletedResponse } from '../model/models';
import { ListSecretResponse } from '../model/models';
import { NotFoundResponse } from '../model/models';
import { OrganisationsListPageParameter } from '../model/models';
import { SecretBody } from '../model/models';
import { SecretBodyPatch } from '../model/models';
import { SecretMetaResponse } from '../model/models';
import { SecretMetaType } from '../model/models';
import { SecretResponse } from '../model/models';
import { UnauthorisedResponse } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface SecretsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Create project secret
     * Create a new project secret
     * @param project_id Project ID reference
     * @param SecretBody Create/Update any field
     */
    projectsSecretsCreate(project_id: string, SecretBody: SecretBody, extraHttpRequestParams?: any): Observable<SecretResponse>;

    /**
     * Delete project secret
     * Delete project secret, if the secret is still linked to an active/deployed function - it cannot be removed
     * @param project_id Project ID reference
     * @param secret_name Unique secret name
     */
    projectsSecretsDelete(project_id: string, secret_name: string, extraHttpRequestParams?: any): Observable<DeletedResponse>;

    /**
     * Get project secret
     * Get a specific project
     * @param project_id Project ID reference
     * @param secret_name Unique secret name
     */
    projectsSecretsGet(project_id: string, secret_name: string, extraHttpRequestParams?: any): Observable<SecretMetaResponse>;

    /**
     * List project secrets of a specific type
     * List project secrets of a specific type
     * @param project_id Project ID reference
     * @param page Query parameters for pagination
     * @param secret_type Type of secret to filter on
     */
    projectsSecretsList(project_id: string, page?: OrganisationsListPageParameter, secret_type?: SecretMetaType, extraHttpRequestParams?: any): Observable<ListSecretResponse>;

    /**
     * Update project secret
     * Update project
     * @param project_id Project ID reference
     * @param secret_name Unique secret name
     * @param SecretBodyPatch Update any field
     */
    projectsSecretsUpdate(project_id: string, secret_name: string, SecretBodyPatch: SecretBodyPatch, extraHttpRequestParams?: any): Observable<SecretResponse>;

}
