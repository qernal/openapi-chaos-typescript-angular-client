/**
 * Chaos
 * Central Management API - publicly exposed set of APIs for managing deployments
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qernal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { DeletedResponse } from '../model/models';
import { ListProjectResponse } from '../model/models';
import { OrganisationsListPageParameter } from '../model/models';
import { ProjectBody } from '../model/models';
import { ProjectBodyPatch } from '../model/models';
import { ProjectResponse } from '../model/models';
import { Configuration } from '../configuration';
export interface ProjectsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    /**
     * Get all projects within an organisation
     * Get all the projects linked to a specific organisation
     * @param organisation_id Organisation ID reference
     * @param page Query parameters for pagination
     */
    organisationsProjectsList(organisation_id: string, page?: OrganisationsListPageParameter, extraHttpRequestParams?: any): Observable<ListProjectResponse>;
    /**
     * Create project
     * Create a new project
     * @param ProjectBody Create/Update any field
     */
    projectsCreate(ProjectBody?: ProjectBody, extraHttpRequestParams?: any): Observable<ProjectResponse>;
    /**
     * Delete project
     * Delete project, this will also delete all the resources within the project
     * @param project_id Project ID reference
     */
    projectsDelete(project_id: string, extraHttpRequestParams?: any): Observable<DeletedResponse>;
    /**
     * Get project
     * Get a specific project
     * @param project_id Project ID reference
     */
    projectsGet(project_id: string, extraHttpRequestParams?: any): Observable<ProjectResponse>;
    /**
     * List projects
     * Get all projects for this user, paginated
     * @param page Query parameters for pagination
     * @param f_name Filter resource on name, if the value ends in an asterix it will be treated as a partial search otherwise, it\&#39;ll be an exact match
     */
    projectsList(page?: OrganisationsListPageParameter, f_name?: string, extraHttpRequestParams?: any): Observable<ListProjectResponse>;
    /**
     * Update project
     * Update project
     * @param project_id Project ID reference
     * @param ProjectBodyPatch Update any field
     */
    projectsUpdate(project_id: string, ProjectBodyPatch?: ProjectBodyPatch, extraHttpRequestParams?: any): Observable<ProjectResponse>;
}
