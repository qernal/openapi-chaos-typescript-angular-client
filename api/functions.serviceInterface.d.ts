/**
 * Chaos
 * Central Management API - publicly exposed set of APIs for managing deployments
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qernal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { DeletedResponse } from '../model/models';
import { Function } from '../model/models';
import { FunctionBody } from '../model/models';
import { ListFunction } from '../model/models';
import { OrganisationsListPageParameter } from '../model/models';
import { Configuration } from '../configuration';
export interface FunctionsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    /**
     * Create function
     * Create a new function
     * @param FunctionBody Create/Update any field
     */
    functionsCreate(FunctionBody: FunctionBody, extraHttpRequestParams?: any): Observable<Function>;
    /**
     * Delete function
     * Delete a function (and all revisions)
     * @param function_id Function ID reference
     */
    functionsDelete(function_id: string, extraHttpRequestParams?: any): Observable<DeletedResponse>;
    /**
     * Get function (latest revision)
     * Get a specific function (latest revision)
     * @param function_id Function ID reference
     */
    functionsGet(function_id: string, extraHttpRequestParams?: any): Observable<Function>;
    /**
     * Get a specific revision of a function
     * Get a specific revision of a function
     * @param function_id Function ID reference
     * @param function_revision_id Function revision ID reference
     */
    functionsRevisionsGet(function_id: string, function_revision_id: string, extraHttpRequestParams?: any): Observable<Function>;
    /**
     * List all revisions for a function
     * List all revisions for a function
     * @param function_id Function ID reference
     * @param page Query parameters for pagination
     */
    functionsRevisionsList(function_id: string, page?: OrganisationsListPageParameter, extraHttpRequestParams?: any): Observable<ListFunction>;
    /**
     * Update function
     * Update a function (creates a new revision)
     * @param function_id Function ID reference
     * @param Function Update any field
     */
    functionsUpdate(function_id: string, Function: Function, extraHttpRequestParams?: any): Observable<Function>;
    /**
     * List all functions within a project
     * List all functions
     * @param project_id Project ID reference
     * @param page Query parameters for pagination
     */
    projectsFunctionsList(project_id: string, page?: OrganisationsListPageParameter, extraHttpRequestParams?: any): Observable<ListFunction>;
}
