/**
 * Chaos
 * Central Management API - publicly exposed set of APIs for managing deployments
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qernal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { DeletedResponse } from '../model/models';
import { Host } from '../model/models';
import { HostBody } from '../model/models';
import { HostBodyPatch } from '../model/models';
import { ListHosts } from '../model/models';
import { OrganisationsListPageParameter } from '../model/models';
import { Configuration } from '../configuration';
export interface HostsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    /**
     * Create host for project
     * Assign a host/domain to a project - hosts are globally unique and require verification, so a host cannot be assigned to multiple projects.  A host can be a valid domain, either a root domain or a subdomain.
     * @param project_id Project ID reference
     * @param HostBody
     */
    projectsHostsCreate(project_id: string, HostBody: HostBody, extraHttpRequestParams?: any): Observable<Host>;
    /**
     * Delete specific host by hostname
     *
     * @param project_id Project ID reference
     * @param hostname Hostname
     */
    projectsHostsDelete(project_id: string, hostname: string, extraHttpRequestParams?: any): Observable<DeletedResponse>;
    /**
     * Get specific host by hostname
     *
     * @param project_id Project ID reference
     * @param hostname Hostname
     */
    projectsHostsGet(project_id: string, hostname: string, extraHttpRequestParams?: any): Observable<Host>;
    /**
     * List hosts for project
     *
     * @param project_id Project ID reference
     * @param page Query parameters for pagination
     */
    projectsHostsList(project_id: string, page?: OrganisationsListPageParameter, extraHttpRequestParams?: any): Observable<ListHosts>;
    /**
     * Update specific host by hostname
     *
     * @param project_id Project ID reference
     * @param hostname Hostname
     * @param HostBodyPatch
     */
    projectsHostsUpdate(project_id: string, hostname: string, HostBodyPatch: HostBodyPatch, extraHttpRequestParams?: any): Observable<Host>;
    /**
     * Schedule host verification task
     *
     * @param project_id Project ID reference
     * @param hostname Hostname
     */
    projectsHostsVerifyCreate(project_id: string, hostname: string, extraHttpRequestParams?: any): Observable<Host>;
}
